// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


enum LikeType {
  LIKE
  DONTLIKE
}

enum ChatType {
  SPOTWISATA
  KEGIATAN
  // TO BE ADDED
}

model User {
  id            Int            @id @unique @default(autoincrement())
  email         String         @unique
  password      String?
  fullName      String
  isSignedByGoogle Boolean     @default(false)
  profilePicPath String?
  profilePicName String?
  refreshTokens RefreshToken[] @relation("UserRefreshToken")
  like          Like[]         @relation("UserLikes")
  post          Post[]         @relation("UserPosts")
  comment       Comment[]      @relation("UserComments")
  chat          Chat[]         @relation("UserChats")
  groupChat     GroupChat[]    @relation("UserChatGroups")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model RefreshToken {   // gausah pake, tokennya dilamain
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      Int
  user        User     @relation("UserRefreshToken", fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id          Int       @id @unique @default(autoincrement())
  userId      Int
  user        User      @relation("UserPosts",fields: [userId], references: [id], onDelete: Cascade)
  description String   @db.Text
  location    String
  likes       Like[]    @relation("PostLikes")
  comments     Comment[]    @relation("PostComments")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Like {
  id          Int       @id @unique @default(autoincrement())
  userId      Int
  user        User      @relation("UserLikes",fields: [userId], references: [id], onDelete: Cascade)
  likeType    LikeType
  postId      Int
  post        Post      @relation("PostLikes", fields: [postId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, postId])
}

model Comment {
  id          Int       @id @unique @default(autoincrement())
  description String    @db.Text
  userId      Int
  user        User      @relation("UserComments",fields: [userId], references: [id], onDelete: Cascade)
  postId      Int
  post        Post      @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


model Chat {
  id          Int       @id @unique @default(autoincrement())
  groupChatId    Int
  groupChat     GroupChat     @relation("chatGroups", fields: [groupChatId], references: [id], onDelete: Cascade)
  question    String      @db.Text
  response			String    @db.Text
  userId      Int
  user        User      @relation("UserChats",fields: [userId], references: [id], onDelete: Cascade)
  type         ChatType
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookmarked  Boolean
}

model GroupChat {
  id          Int       @id @unique @default(autoincrement())
  chats       Chat[]    @relation("chatGroups")
   userId      Int
  user        User      @relation("UserChatGroups",fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
